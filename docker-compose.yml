services:
  mysql:
    image: 'mysql:8.0'
    container_name: transporte-mysql
    environment:
      MYSQL_DATABASE: ${DB_NAME:-appdb}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secretAppPwd}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_USER: ${DB_USER:-appuser}
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
      interval: 5s
    restart: unless-stopped

  transporte-app:
    build: .
    container_name: transporte-app
    ports:
      - '8080:8080'
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    environment:
      # Configuración de Base de Datos
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${DB_NAME:-appdb}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Asuncion
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-appuser}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-secretAppPwd}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      
      # Configuración JPA
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      
      # Configuración de Seguridad
      JWT_SECRET: ${JWT_SECRET:-404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      
      # Configuración de Migraciones - DESHABILITADO
      SPRING_FLYWAY_ENABLED: "false"
      
      # Configuración de Swagger
      SPRINGDOC_SWAGGER_UI_ENABLED: "true"
      SPRINGDOC_API_DOCS_ENABLED: "true"
      SPRINGDOC_SWAGGER_UI_PATH: /swagger-ui.html
      SPRINGDOC_API_DOCS_PATH: /api-docs
      
      # Configuración de Actuator
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      MANAGEMENT_ENDPOINT_METRICS_ENABLED: "true"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
      MANAGEMENT_METRICS_TAGS_APPLICATION: transporte
      
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - ./src/main/resources/db/migration:/app/db/migration

  # Servicio para pruebas locales con H2 (opcional)
  transporte-app-test:
    build: .
    profiles: ["test"]
    ports:
      - '8081:8080'
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.h2.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.H2Dialect
      SPRING_H2_CONSOLE_ENABLED: "true"
      SPRINGDOC_SWAGGER_UI_ENABLED: "true"
      SPRINGDOC_API_DOCS_ENABLED: "true"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_WEB_JAVAOPTS=-Xmx512m -Xms128m
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      - transporte-app

  # Servicio para análisis automático
  sonar-scanner:
    image: sonarqube-scanner:latest
    container_name: sonar-scanner
    volumes:
      - .:/workspace
    working_dir: /workspace
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=admin
    command: >
      sh -c "
        echo 'Esperando que SonarQube esté listo...' &&
        while ! curl -f http://sonarqube:9000/api/system/status; do
          sleep 10
        done &&
        echo 'SonarQube listo, iniciando análisis...' &&
        mvn clean verify sonar:sonar
          -Dsonar.host.url=http://sonarqube:9000
          -Dsonar.login=admin
          -Dsonar.password=admin
          -Dsonar.projectKey=transporte
          -Dsonar.projectName='Sistema de Transporte'
      "
    depends_on:
      sonarqube:
        condition: service_healthy
    profiles: ["analysis"]  # Solo se ejecuta cuando se especifica

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    depends_on:
      - prometheus

  # Análisis automático después de que la app esté lista
  auto-sonar-analysis:
    build: .
    container_name: auto-sonar-analysis
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=admin
    command: >
      sh -c "
        echo 'Esperando que SonarQube esté listo...' &&
        while ! curl -f http://sonarqube:9000/api/system/status; do
          sleep 10
        done &&
        echo 'SonarQube listo, iniciando análisis automático...' &&
        mvn clean verify sonar:sonar
          -Dsonar.host.url=http://sonarqube:9000
          -Dsonar.login=admin
          -Dsonar.password=admin
          -Dsonar.projectKey=transporte
          -Dsonar.projectName='Sistema de Transporte'
      "
    depends_on:
      sonarqube:
        condition: service_healthy
      transporte-app:
        condition: service_healthy
    restart: "no"  # Solo se ejecuta una vez

volumes:
  mysql-data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  prometheus_data:
  grafana_data:
